
 /* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulador;


import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import Config_Enums.Addressing;
import Config_Enums.Format_Content;
import Config_Enums.Format_Length;
import Config_Enums.ImagesExtension;
import Config_Enums.MailBox_Discipline;
import Config_Enums.Sync_Receive;
import Config_Enums.Sync_Send;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;


public class PantallaPrincipal extends javax.swing.JFrame {
    Controller controlador; 
    public static String FILEPATH;
    public static BufferedReader BUFFERREADER;
    
    /**
     * Creates new form PantallaPrincipal
     */
    public PantallaPrincipal() {
        controlador = Controller.getInstance();
        initComponents();        
        
        configTabs.setEnabledAt(1,false);
        configTabs.setEnabledAt(2,false);
        configTabs.setEnabledAt(3,true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpSincronizacionSend = new javax.swing.ButtonGroup();
        btngrpSincronizacionReceive = new javax.swing.ButtonGroup();
        btngrpAddressing = new javax.swing.ButtonGroup();
        btngrpFormatLength = new javax.swing.ButtonGroup();
        btngrpMailBoxDiscipline = new javax.swing.ButtonGroup();
        btngrpInteractiveSend = new javax.swing.ButtonGroup();
        jButton6 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        configTabs = new javax.swing.JTabbedPane();
        variableTabPanel1 = new javax.swing.JPanel();
        panelAddMailBox = new javax.swing.JPanel();
        txfMailBoxID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        spinMaxNoMessages = new javax.swing.JSpinner();
        btnAddMailBox = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMailBox = new javax.swing.JTable();
        lblSubscribeToMailBox2 = new javax.swing.JLabel();
        spinMaxNoMessages3 = new javax.swing.JSpinner();
        panelAddProcess = new javax.swing.JPanel();
        txfProcessID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnAddProcess = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProcess = new javax.swing.JTable();
        lblSubscribeToMailBox = new javax.swing.JLabel();
        spinMaxNoMessages1 = new javax.swing.JSpinner();
        lblSubscribeToMailBox1 = new javax.swing.JLabel();
        spinMaxNoMessages2 = new javax.swing.JSpinner();
        btnGoToRun = new javax.swing.JButton();
        startTab3 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableInteractiveProcessList = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnReceiveMessage = new javax.swing.JButton();
        btnReceiveMessage1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        btnRunChooseFile = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        btnSendMessage = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        btnChooseFile = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        spinBatchLines = new javax.swing.JSpinner();
        btnExecuteBatch = new javax.swing.JButton();
        btnDisplay = new javax.swing.JButton();
        btnSystemReset = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblActionsDisplay = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblProcessDisplay = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane17 = new javax.swing.JScrollPane();
        tblMailBoxDisplay = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblMessageDisplay = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txaShowMessageContent = new javax.swing.JTextArea();
        lblShowMessageID = new javax.swing.JLabel();
        lblShowMessagePriority = new javax.swing.JLabel();
        lblShowMessageSourceID = new javax.swing.JLabel();
        lblShowMessageDestinationID = new javax.swing.JLabel();
        lblShowMessageSize = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jLabel37 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTextArea13 = new javax.swing.JTextArea();
        jLabel40 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        configTabs.setMinimumSize(new java.awt.Dimension(82, 40));

        variableTabPanel1.setPreferredSize(new java.awt.Dimension(32767, 32767));

        panelAddMailBox.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txfMailBoxID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfMailBoxIDActionPerformed(evt);
            }
        });

        jLabel1.setText("Add Application");

        jLabel4.setText("Name");

        jLabel6.setText("Priority");

        btnAddMailBox.setText("Add");
        btnAddMailBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMailBoxActionPerformed(evt);
            }
        });

        tableMailBox.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Application Name", "Queue Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableMailBox);
        if (tableMailBox.getColumnModel().getColumnCount() > 0) {
            tableMailBox.getColumnModel().getColumn(0).setResizable(false);
            tableMailBox.getColumnModel().getColumn(1).setResizable(false);
        }

        lblSubscribeToMailBox2.setText("Queue size");

        javax.swing.GroupLayout panelAddMailBoxLayout = new javax.swing.GroupLayout(panelAddMailBox);
        panelAddMailBox.setLayout(panelAddMailBoxLayout);
        panelAddMailBoxLayout.setHorizontalGroup(
            panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddMailBoxLayout.createSequentialGroup()
                .addGroup(panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddMailBoxLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAddMailBoxLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panelAddMailBoxLayout.createSequentialGroup()
                                .addComponent(lblSubscribeToMailBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinMaxNoMessages3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddMailBoxLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinMaxNoMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddMailBoxLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txfMailBoxID, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(9, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddMailBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddMailBoxLayout.createSequentialGroup()
                        .addComponent(btnAddMailBox, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddMailBoxLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );
        panelAddMailBoxLayout.setVerticalGroup(
            panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddMailBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txfMailBoxID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spinMaxNoMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(panelAddMailBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinMaxNoMessages3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubscribeToMailBox2))
                .addGap(18, 18, 18)
                .addComponent(btnAddMailBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelAddProcess.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelAddProcess.setPreferredSize(new java.awt.Dimension(296, 456));

        txfProcessID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfProcessIDActionPerformed(evt);
            }
        });

        jLabel2.setText("Add Printer");

        btnAddProcess.setText("Add");
        btnAddProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProcessActionPerformed(evt);
            }
        });

        jLabel3.setText("Name");

        tableProcess.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Printer Name", "Queue Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProcess.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                //tableProcessMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //tableProcessMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(tableProcess);
        if (tableProcess.getColumnModel().getColumnCount() > 0) {
            tableProcess.getColumnModel().getColumn(0).setResizable(false);
            tableProcess.getColumnModel().getColumn(1).setResizable(false);
        }

        lblSubscribeToMailBox.setText("Priority");

        lblSubscribeToMailBox1.setText("Queue size");

        javax.swing.GroupLayout panelAddProcessLayout = new javax.swing.GroupLayout(panelAddProcess);
        panelAddProcess.setLayout(panelAddProcessLayout);
        panelAddProcessLayout.setHorizontalGroup(
            panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddProcessLayout.createSequentialGroup()
                .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddProcessLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddProcessLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txfProcessID))
                            .addGroup(panelAddProcessLayout.createSequentialGroup()
                                .addComponent(lblSubscribeToMailBox, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panelAddProcessLayout.createSequentialGroup()
                        .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelAddProcessLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(spinMaxNoMessages1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelAddProcessLayout.createSequentialGroup()
                                    .addGap(94, 94, 94)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelAddProcessLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddProcessLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnAddProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
            .addGroup(panelAddProcessLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSubscribeToMailBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(spinMaxNoMessages2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelAddProcessLayout.setVerticalGroup(
            panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddProcessLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddProcessLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txfProcessID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSubscribeToMailBox)
                            .addComponent(spinMaxNoMessages1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddProcessLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelAddProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinMaxNoMessages2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSubscribeToMailBox1))))
                .addComponent(btnAddProcess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnGoToRun.setText("Next");
        btnGoToRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout variableTabPanel1Layout = new javax.swing.GroupLayout(variableTabPanel1);
        variableTabPanel1.setLayout(variableTabPanel1Layout);
        variableTabPanel1Layout.setHorizontalGroup(
            variableTabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, variableTabPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(panelAddProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelAddMailBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGoToRun, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );
        variableTabPanel1Layout.setVerticalGroup(
            variableTabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, variableTabPanel1Layout.createSequentialGroup()
                .addGroup(variableTabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(variableTabPanel1Layout.createSequentialGroup()
                        .addContainerGap(535, Short.MAX_VALUE)
                        .addComponent(btnGoToRun))
                    .addGroup(variableTabPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(variableTabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelAddProcess, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                            .addComponent(panelAddMailBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        configTabs.addTab("Objects", variableTabPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setPreferredSize(new java.awt.Dimension(330, 502));

        jLabel8.setText("Interactive");

        tableInteractiveProcessList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Application Name", "Free Space"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInteractiveProcessList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableInteractiveProcessListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableInteractiveProcessList);
        if (tableInteractiveProcessList.getColumnModel().getColumnCount() > 0) {
            tableInteractiveProcessList.getColumnModel().getColumn(0).setResizable(false);
            tableInteractiveProcessList.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setText("Print");

        btnReceiveMessage.setText("Print Next");
        btnReceiveMessage.setEnabled(false);
        btnReceiveMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReceiveMessageActionPerformed(evt);
            }
        });

        btnReceiveMessage1.setText("Print All");
        btnReceiveMessage1.setEnabled(false);
        btnReceiveMessage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //btnReceiveMessage1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReceiveMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(btnReceiveMessage1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReceiveMessage)
                    .addComponent(btnReceiveMessage1))
                .addGap(16, 16, 16))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnRunChooseFile.setText("Choose File");
        btnRunChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunChooseFileActionPerformed(evt);
            }
        });

        jLabel11.setText("Request");

        btnSendMessage.setText("Print Request");
        btnSendMessage.setEnabled(false);
        btnSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSendMessage)
                            .addComponent(btnRunChooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(76, 76, 76)
                .addComponent(btnRunChooseFile)
                .addGap(37, 37, 37)
                .addComponent(btnSendMessage)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jLabel8))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setMinimumSize(new java.awt.Dimension(32767, 32767));
        jPanel4.setPreferredSize(new java.awt.Dimension(32767, 32767));

        jLabel9.setText("Batch");

        btnChooseFile.setText("Choose File");
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        jLabel13.setText("No.  of commands  to be executed");

        btnExecuteBatch.setText("Execute");
        btnExecuteBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //btnExecuteBatchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(spinBatchLines, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13))
                .addGap(78, 78, 78)
                .addComponent(btnChooseFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExecuteBatch)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(267, 267, 267))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spinBatchLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnChooseFile)
                        .addComponent(btnExecuteBatch)))
                .addGap(39, 39, 39))
        );

        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        btnSystemReset.setText("Reset");
        btnSystemReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //btnSystemResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout startTab3Layout = new javax.swing.GroupLayout(startTab3);
        startTab3.setLayout(startTab3Layout);
        startTab3Layout.setHorizontalGroup(
            startTab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startTab3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(startTab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(startTab3Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSystemReset)
                .addGap(1354, 1354, 1354))
        );
        startTab3Layout.setVerticalGroup(
            startTab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startTab3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(startTab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addGroup(startTab3Layout.createSequentialGroup()
                        .addComponent(btnSystemReset)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(startTab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(startTab3Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startTab3Layout.createSequentialGroup()
                        .addComponent(btnDisplay)
                        .addGap(34, 34, 34))))
        );

        configTabs.addTab("Run", startTab3);

        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblActionsDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Action", "MessageID", "Timestamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblActionsDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblActionsDisplayMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblActionsDisplay);
        if (tblActionsDisplay.getColumnModel().getColumnCount() > 0) {
            tblActionsDisplay.getColumnModel().getColumn(0).setResizable(false);
            tblActionsDisplay.getColumnModel().getColumn(1).setResizable(false);
            tblActionsDisplay.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel15.setText("Printers List");

        tblProcessDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Printer Name", "Free Space"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProcessDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProcessDisplayMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblProcessDisplay);
        if (tblProcessDisplay.getColumnModel().getColumnCount() > 0) {
            tblProcessDisplay.getColumnModel().getColumn(0).setResizable(false);
            tblProcessDisplay.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        jPanel5.add(jPanel7);

        jPanel12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel19.setText("Applications List");

        tblMailBoxDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Application Name", "Free Space"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMailBoxDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMailBoxDisplayMouseClicked(evt);
            }
        });
        jScrollPane17.setViewportView(tblMailBoxDisplay);
        if (tblMailBoxDisplay.getColumnModel().getColumnCount() > 0) {
            tblMailBoxDisplay.getColumnModel().getColumn(0).setResizable(false);
            tblMailBoxDisplay.getColumnModel().getColumn(1).setResizable(false);
        }

        tblMessageDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Action", "MessageID", "Timestamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMessageDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMessageDisplayMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tblMessageDisplay);
        if (tblMessageDisplay.getColumnModel().getColumnCount() > 0) {
            tblMessageDisplay.getColumnModel().getColumn(0).setResizable(false);
            tblMessageDisplay.getColumnModel().getColumn(1).setResizable(false);
            tblMessageDisplay.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13))
        );

        jPanel5.add(jPanel12);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel20.setText("Message information");

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("MessageID:");

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("Priority:");

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setText("SourceID:");

        jLabel21.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel21.setText("DestinationID:");

        jLabel22.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel22.setText("Message Content:");

        txaShowMessageContent.setEditable(false);
        txaShowMessageContent.setColumns(20);
        txaShowMessageContent.setRows(5);
        txaShowMessageContent.setEnabled(false);
        jScrollPane5.setViewportView(txaShowMessageContent);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(294, 294, 294))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel21))
                                .addGap(30, 30, 30))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(48, 48, 48)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblShowMessageSourceID, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                            .addComponent(lblShowMessagePriority, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                            .addComponent(lblShowMessageDestinationID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblShowMessageID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblShowMessageSize, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addGap(40, 40, 40))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(lblShowMessageSize))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(lblShowMessageID))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(lblShowMessagePriority))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(lblShowMessageSourceID))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(lblShowMessageDestinationID)))
                    .addComponent(jScrollPane5))
                .addGap(20, 20, 20))
        );

        jPanel5.add(jPanel1);

        configTabs.addTab("Display", jPanel5);

        jTextArea9.setEditable(false);
        jTextArea9.setColumns(20);
        jTextArea9.setRows(5);
        jTextArea9.setText("Each process requires a name that identifies it, there are no restrictions for it.\n\nIf you have chosen direct addressing, the processes are created independently, so you will see that the word \"None\" appears in the \nprocess table.\n\nIn case of having chosen indirect addressing, the processes must subscribe to one or more Mailboxes in order to be able to send \nmessages between processes. In case there are no Mailboxes created so far, you should proceed to create at least one, as shown\nin the section \"Add MailBox\".\n\nOnce you have written the name of the process and you have subscribed to a MailBox (if you selected this option), you must press the \nAdd button to create it. Then you will see it in the process table, with its corresponding ID and MailBox.");
        jScrollPane19.setViewportView(jTextArea9);

        jLabel35.setText("Add MailBox");

        jLabel36.setText("Add Process");

        jTextArea10.setEditable(false);
        jTextArea10.setColumns(20);
        jTextArea10.setRows(5);
        jTextArea10.setText("If you have selected the option of indirect addressing it will be necessary to use Mailboxes for sending messages. \n\nYou must create at \nleast one to use the functions of the program.\n\nEach of the MailBox has a name that identifies it, there are no restrictions for it. In addition, each MailBox has a limited capacity of \nmessages that must be introduced in the spinner, so that once this capacity is reached, the MailBox will not receive more messages.\n\nOnce the name and capacity have been added, you must press the Add button. Then you will see it in the MailBox table \nwith its respective ID and capacity.\n\nAfter creating one or more MailBox you can create processes that subscribe to said MailBox to initiate the sending of messages.");
        jScrollPane20.setViewportView(jTextArea10);

        jLabel37.setText("NOTE: it's necessary to PRESS the NEXT button once you have completed the configuration on that screen.");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(jLabel36))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(jLabel35))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane20, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                            .addComponent(jScrollPane19)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel37)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel36)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel35)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel37)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Objects Help", jPanel14);

        jLabel38.setText("Interactive");

        jTextArea11.setEditable(false);
        jTextArea11.setColumns(20);
        jTextArea11.setRows(5);
        jTextArea11.setText("On the left side you will see a table that contains all the processes that were created in the previous stage. For each process you have \nthe ID, the status (indicates the current context of it) and whether it is blocked or not (if you have chosen some blocking \nsynchronization you will see that a check is activated when an operation performed that produces a blocking).\n\nIn the right panel you have the option to send messages. In the Destination window you can choose which of the existing processes \nyou want to send a message to. \n\nIf you have selected the content format as text, the option in which you can write any message will be enabled. If you have selected \nAudio, Image or Video, the option to choose files from any directory on your computer will be enabled, you only have to press the \nChoose File button, select the file and press open. If you select a file that has an extension that is not valid for the specified file format, \nthe program will display an error message.\n\nEach of the messages has a priority (if you have chosen the discipline of MailBox Priority), which indicates how quickly you can receive \na message. The higher the priority number, the faster it will be chosen.\n\nOnce you have completed the previous steps, press the Send button, this will create and send the message.\n\nEven in the interactive panel, at the bottom right is the option to receive messages. You must select from which of the available \nprocesses you want to receive a message. Once you have selected it, press the Receive button. Take into account that depending on \nhow you have configured the program and the messages you have sent, you may receive a message immediately or not.\n\nTo send and receive messages, you must have previously select some of the processes in the process table, otherwise the \nSend and Receive buttons will not be enabled.");
        jScrollPane21.setViewportView(jTextArea11);

        jLabel39.setText("Batch");

        jTextArea12.setEditable(false);
        jTextArea12.setColumns(20);
        jTextArea12.setRows(5);
        jTextArea12.setText("The batch panel allows you to execute the functions of sending and receiving messages \nautomatically. For this you must take into account that the file with the instructions must \ncomply with a specific format. This file is loaded with Choose File from this panel. \nIn addition, you must choose a number of instructions to execute. Once these steps are \ncompleted, proceed to press the Execute button to start the simulation.");
        jScrollPane22.setViewportView(jTextArea12);

        jTextArea13.setEditable(false);
        jTextArea13.setColumns(20);
        jTextArea13.setRows(5);
        jTextArea13.setText("If you want to see the current\nstatus of the messages sent,\nreceived and the content of the\nMailBox, press the Display button.");
        jScrollPane23.setViewportView(jTextArea13);

        jLabel40.setText("Display Button");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel15Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane22, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel15Layout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 325, Short.MAX_VALUE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane21))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel15Layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel40)))
                .addGap(62, 62, 62))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel40)
                    .addComponent(jLabel39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(jScrollPane22))
                .addGap(59, 59, 59))
        );

        jTabbedPane3.addTab("Run Help", jPanel15);

        jTextArea6.setEditable(false);
        jTextArea6.setColumns(20);
        jTextArea6.setRows(5);
        jTextArea6.setText("The first table contains all the active processes in the system and their current status. \n\nWhen you select any of the processes you can see in the complementary table all the actions that this process has done \n(send and receive). You will see for each message the ID, the action taken and the specific moment in which it was made.\n\n");
        jScrollPane12.setViewportView(jTextArea6);

        jLabel25.setText("Processes Table");

        jLabel26.setText("MailBoxes Table");

        jTextArea7.setEditable(false);
        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jTextArea7.setText("The seconf table contains all the active MailBoxex in the system and their current status (quota available for upcoming messages). \n\nWhen you select any of the MailBox you can see in the complementary table all the messages that are still contained within it. \nAnd in the following table, all the subscribed processes that receive messages from that MailBox.\n\n");
        jScrollPane13.setViewportView(jTextArea7);

        jLabel27.setText("Messages Information");

        jTextArea8.setEditable(false);
        jTextArea8.setColumns(20);
        jTextArea8.setRows(5);
        jTextArea8.setText("If you want to see the complete information of a specific message, what you should do is select it in any of the complementary tables \nthat contain the message IDs.\n\nOnce a message has been selected you can see its ID, its priority, the process that sent it and the process that received it, its size \nand its content.");
        jScrollPane14.setViewportView(jTextArea8);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addGap(381, 381, 381)
                            .addComponent(jLabel25))
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addGap(377, 377, 377)
                            .addComponent(jLabel26))
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel11Layout.createSequentialGroup()
                                    .addGap(355, 355, 355)
                                    .addComponent(jLabel27))
                                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                                .addComponent(jScrollPane12)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel25)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Display Help", jPanel11);

        configTabs.addTab("Help", jTabbedPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(configTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(configTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void checkPanelAddMailBoxVisibility(){
        
        panelAddProcess.setVisible(false);

    }
    
    public void checkUploadFileVisibility(){
        
        btnRunChooseFile.setVisible(true);            

    }
    
    private void txfProcessIDActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                        

    private void btnViewMailBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMailBoxActionPerformed
        int selectedRow = tblMailBoxDisplay.getSelectedRow();
        String value = (String) tblMailBoxDisplay.getValueAt(selectedRow, 0);
        DefaultTableModel suscribedTable = (DefaultTableModel) tblProcessDisplay.getModel();
        DefaultTableModel messageTable = (DefaultTableModel) tblMailBoxDisplay.getModel();
        suscribedTable.getDataVector().removeAllElements();
        messageTable.getDataVector().removeAllElements();
        for(MailBox mailbox: controlador.getMailBoxes()){
            if(mailbox.getIdMailBox().equals(value)){
                for(Proceso proceso: mailbox.suscritos){
                    suscribedTable.addRow(new Object[]{proceso.idProceso});
                }
                for(Mensaje mensaje: mailbox.getBufferMensajes()){
                    messageTable.addRow(new Object[]{mensaje.idMensaje, false});
                }
            }
        }
    }//GEN-LAST:event_btnViewMailBoxActionPerformed

    private void btnViewActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionsActionPerformed
        int selectedRow = tblProcessDisplay.getSelectedRow();
        String value = (String) tblProcessDisplay.getValueAt(selectedRow, 0);
        DefaultTableModel actionsTable = (DefaultTableModel) tblActionsDisplay.getModel();
        actionsTable.getDataVector().removeAllElements();
        Proceso p = controlador.getProcess(value);
        for(MessageRecord record: p.recordHistory){
            actionsTable.addRow(new Object[]{record.getAction(),record.getMessage().getIdMensaje(),record.getTimeStamp()});
        }
    }//GEN-LAST:event_btnViewActionsActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {                                           
        configTabs.setSelectedIndex(3);
        configTabs.setEnabledAt(0,false);
        configTabs.setEnabledAt(1,false);
        configTabs.setEnabledAt(2,true);
        configTabs.setEnabledAt(3,true);
        fillDisplayView();
    }                                          

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                String entrada = chooser.getSelectedFile().getPath();
                BUFFERREADER = new BufferedReader(new FileReader(entrada));
                System.out.println("Archivo .txt cargado correctamente");                
            }
        } catch (Exception e) {
            System.out.println("Error: no se pudo cargar el archivo");
        }
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void btnSendMessageActionPerformed(java.awt.event.ActionEvent evt) {                                               
        Proceso p = controlador.getProcess(tableInteractiveProcessList.getValueAt(tableInteractiveProcessList.getSelectedRow(), 0).toString());
        
        controlador.sendMessage(new Mensaje(Controller.messageIDCounter++, FILEPATH, p.getIdProceso(), p.getIdProceso()));
        refreshInteractiveTable();        
    }                                              

    private void BatchSendMessageActionPerformed(String sender, String receiver, String message, int priority, int lenghtNumber) {                                               
        Proceso send = controlador.getProcess(sender);
        
            if((controlador.getConfiguration().getAddressing().equals(Addressing.DYNAMIC)) && controlador.remainingMessages(controlador.getMailBox(receiver)) == 0){
                JOptionPane.showMessageDialog(null, "MailBox out of space to allocate message", "MailBox error", 0);
            }else{
                long largo = -1;  //en caso de que LENGHT sea VARIABLE lo toma como -1.


                controlador.sendMessage(new Mensaje(Controller.messageIDCounter++, FILEPATH, send.getIdProceso(), receiver));
                    
                refreshInteractiveTable();
            }
        
    }
    
    private void rdbtnUploadFileActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void btnRunChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunChooseFileActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                FILEPATH = chooser.getSelectedFile().getPath();
                String[] tokens = FILEPATH.split("\\.(?=[^\\.]+$)");

                if(controlador.getConfiguration().content.equals(Format_Content.IMAGE)){
                    try {
                        ImagesExtension prueba = ImagesExtension.valueOf(tokens[1]);
                        System.out.println("Archivo " + tokens[1] + " cargado correctamente");
                    } catch (IllegalArgumentException ex) {
                        JOptionPane.showMessageDialog(null, "Error: Format " + tokens[1] + " not admited", "Invalid format", 0);
                    }
                }               
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: File can't be charged ", "File Error", 0);
        }
    }//GEN-LAST:event_btnRunChooseFileActionPerformed

    private void btnReceiveMessageActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
        Proceso p = controlador.getProcess(tableInteractiveProcessList.getValueAt(tableInteractiveProcessList.getSelectedRow(), 0).toString());

        //controlador.receiveMessage(p.getIdProceso(), cboSourceList.getSelectedItem().toString());
        refreshInteractiveTable();
    }                                                 

    private void BatchReceiveMessageActionPerformed(String receiver, String sender) {
        Proceso receive = controlador.getProcess(receiver);
        if(receive.getBlocking()){
            JOptionPane.showMessageDialog(null, "Can't use a blocked process", "Receive error", 0);
        }else{
            controlador.receiveMessage(receive.getIdProceso(), sender);
            refreshInteractiveTable();
        }
    }
    
    private void tableInteractiveProcessListMouseClicked(java.awt.event.MouseEvent evt) {                                                         
        // TODO add your handling code here:
        btnSendMessage.setEnabled(true);
        btnReceiveMessage.setEnabled(true);
        //fillSendNReceiveComboBox(controlador.getConfiguration().getAddressing(), tableInteractiveProcessList.getValueAt(tableInteractiveProcessList.getSelectedRow(), 0).toString());
    }        
    
    private boolean isOkToStart(){     
        if(controlador.getConfiguration().getAddressing().equals(Addressing.DYNAMIC)){
            // F - A - L - T - A
            if(controlador.getMailBoxes().size()<1){
                return false;
            }
        }               
        return true;
    }

    private void btnGoToRunActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(isOkToStart()){        
            configTabs.setSelectedIndex(2);
            configTabs.setEnabledAt(0,false);
            configTabs.setEnabledAt(1,false);
            configTabs.setEnabledAt(2,true);
            configTabs.setEnabledAt(3,true);
            checkUploadFileVisibility();
            fillRunView();
        }
    }                                          

    private boolean existsMBID(String MBID){
        for(MailBox mail: controlador.getMailBoxes()){
            if(mail.getIdMailBox().equals(MBID))
                return true;
        }
        return false;
    }
    
    private boolean existsPID(String PID){
        for(Proceso process: controlador.getProcesses()){
            if(process.equals(PID)){
                return true;
            }
        }
        return false;
    }
    
    private void btnAddProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProcessActionPerformed
        if(!txfProcessID.getText().isEmpty()){
            
                DefaultTableModel modelo = (DefaultTableModel)tableProcess.getModel();
                Addressing addressing = controlador.getConfiguration().getAddressing();
                ArrayList<MailBox> mailboxes = controlador.getMailBoxes();
                MailBox selectedMailBox = null;

                for(MailBox mail: mailboxes){
                    //if (mail.idMailBox.equals(cboSubscribeToMailBox.getSelectedItem().toString()))
                    selectedMailBox = mail;
                }
                
                Proceso nuevoProceso  = new Proceso(txfProcessID.getText());                
                
                controlador.addProcess(nuevoProceso);

                // Si el addressing es directo solo se necesita el PID y se agrega
                    modelo.addRow(new Object[]{txfProcessID.getText(),"None"});
                
                    if(addressing.equals(Addressing.DYNAMIC)){
                        selectedMailBox.getSuscritos().add(nuevoProceso);
                       // modelo.addRow(new Object[]{txfProcessID.getText(),cboSubscribeToMailBox.getSelectedItem().toString()});
                    }else{
                        JOptionPane.showMessageDialog(null, "The selected MailBox has already 1 subscribed Process", "Subscription error to MailBox", 0);
                    }
                    //JOptionPane.showMessageDialog(null, "MailBox: " + selectedMailBox.getIdMailBox() + " tiene " + String.valueOf(selectedMailBox.getSuscritos().size()) + " procesos", "Mensaje", 1);
                
                txfProcessID.setText("");
                tableProcess.setModel(modelo);
            
        }else{
            JOptionPane.showMessageDialog(null,  "PID can't be empty", "Null PID Error", 0);
        }        
        txfProcessID.requestFocus();
    }//GEN-LAST:event_btnAddProcessActionPerformed

    private void BatchAddProcessActionPerformed(String processName,String mailboxName) {                                              
        if(!(processName == null)){            
                DefaultTableModel modelo = (DefaultTableModel)tableProcess.getModel();
                Addressing addressing = controlador.getConfiguration().getAddressing();
                ArrayList<MailBox> mailboxes = controlador.getMailBoxes();
                MailBox selectedMailBox = null;

                for(MailBox mail: mailboxes){
                    if (mail.idMailBox.equals(mailboxName))
                        selectedMailBox = mail;
                }
                
                Proceso nuevoProceso  = new Proceso(processName);  
                controlador.addProcess(nuevoProceso);

                // Si el addressing es directo solo se necesita el PID y se agrega
                
                        if(addressing.equals(Addressing.DYNAMIC)){
                            selectedMailBox.getSuscritos().add(nuevoProceso);
                            modelo.addRow(new Object[]{processName,mailboxName});
                        }else{
                            JOptionPane.showMessageDialog(null, "The selected MailBox has already 1 subscribed Process", "Subscription error to MailBox", 0);
                        }
                        //JOptionPane.showMessageDialog(null, "MailBox: " + selectedMailBox.getIdMailBox() + " tiene " + String.valueOf(selectedMailBox.getSuscritos().size()) + " procesos", "Mensaje", 1);
                    
                
                txfProcessID.setText("");
                tableProcess.setModel(modelo);
            
        }else{
            JOptionPane.showMessageDialog(null,  "PID can't be empty", "Null PID Error", 0);
        }
        
        txfProcessID.requestFocus();
    }
    private void btnAddMailBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMailBoxActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel)tableMailBox.getModel();

        if(!txfMailBoxID.getText().isEmpty()){
            if(!existsMBID(txfMailBoxID.getText())){
                controlador.addMailBox(new MailBox(txfMailBoxID.getText(), Integer.valueOf(spinMaxNoMessages.getValue().toString())));

                modelo.addRow(new Object[]{txfMailBoxID.getText(),spinMaxNoMessages.getValue().toString()});

                tableMailBox.setModel(modelo);

                panelAddProcess.setVisible(true);
                //cboSubscribeToMailBox.insertItemAt(txfMailBoxID.getText(), cboSubscribeToMailBox.getItemCount());//mail.getIdMailBox(), cboSubscribeToMailBox.getItemCount());
                //cboSubscribeToMailBox.setSelectedIndex(0); 
            }else{
                JOptionPane.showMessageDialog(null, "MBID already created", "Duplicated MBID Error", 0);
            }
        }else{
            JOptionPane.showMessageDialog(null, "MBID can't be empty", "Null MBID Error", 0);
        }
        txfMailBoxID.setText("");
        txfMailBoxID.requestFocus();
        
    }//GEN-LAST:event_btnAddMailBoxActionPerformed

    private void BatchAddMailBoxActionPerformed(String mailBoxName, int mailBoxCapacity) {
        DefaultTableModel modelo = (DefaultTableModel)tableMailBox.getModel();

        if(!(mailBoxName == null)){
            if(!existsMBID(mailBoxName)){
                controlador.addMailBox(new MailBox(mailBoxName, mailBoxCapacity));

                modelo.addRow(new Object[]{mailBoxName,mailBoxCapacity});

                tableMailBox.setModel(modelo);

                panelAddProcess.setVisible(true);
                //cboSubscribeToMailBox.insertItemAt(mailBoxName, cboSubscribeToMailBox.getItemCount());//mail.getIdMailBox(), cboSubscribeToMailBox.getItemCount());
                //cboSubscribeToMailBox.setSelectedIndex(0); 
            }else{
                JOptionPane.showMessageDialog(null, "MBID already created", "Duplicated MBID Error", 0);
            }
        }else{
            JOptionPane.showMessageDialog(null, "MBID can't be empty", "Null MBID Error", 0);
        }
        txfMailBoxID.setText("");
        txfMailBoxID.requestFocus();
        
    } 
    
    private void txfMailBoxIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfMailBoxIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfMailBoxIDActionPerformed
    
    private void btnGenerateConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateConfigActionPerformed
        // TODO add your handling code here:
        Sync_Receive receive;
        Sync_Send send;
        Addressing addressing = null;
        Format_Content content;
        Format_Length length;
        MailBox_Discipline discipline;

        send = Sync_Send.NON_BLOCKING;
        receive = Sync_Receive.TEST_FOR_ARRIVAL;
        length = Format_Length.VARIABLE;
        discipline = MailBox_Discipline.PRIORITY;
        content = Format_Content.valueOf("IMAGE");
        addressing = Addressing.DYNAMIC;

        //JOptionPane.showMessageDialog(null, "Receive: " + receive.toString() + "\n Send: " + send.toString() + "\n Addressing: " + addressing.toString() + "\n Content: " + content.toString() + "\n Length: " + length.toString() + "\n Discipline: " + discipline.toString(), "Resumen de variables", 1);

        controlador.setConfiguration(receive, send, addressing, content, length, discipline);
        checkPanelAddMailBoxVisibility();
        configTabs.setSelectedIndex(1);
        configTabs.setEnabledAt(0,false);
        configTabs.setEnabledAt(2,false);
        configTabs.setEnabledAt(3,true);
    }//GEN-LAST:event_btnGenerateConfigActionPerformed

    private void rdbtnQueueingDisciplinePriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnQueueingDisciplinePriorityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnQueueingDisciplinePriorityActionPerformed

    private void rdbtnLengthVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnLengthVariableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnLengthVariableActionPerformed

    private void rdbtnAddressingDirectImplicitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnAddressingDirectImplicitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnAddressingDirectImplicitActionPerformed

    private void rdbtnSincronizacionSendNonBlockingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnSincronizacionSendNonBlockingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnSincronizacionSendNonBlockingActionPerformed

    private void rdbtnSincronizacionReceiveTestForArrivalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnSincronizacionReceiveTestForArrivalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnSincronizacionReceiveTestForArrivalActionPerformed

    private void rdbtnSincronizacionReceiveNonBlockingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnSincronizacionReceiveNonBlockingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnSincronizacionReceiveNonBlockingActionPerformed

    
    void refreshInteractiveTable(){
       DefaultTableModel modelo = (DefaultTableModel) tableInteractiveProcessList.getModel();
       modelo.getDataVector().removeAllElements();
       for(Proceso proceso: controlador.getProcesses()){
           //change if it is receiven or sending
           modelo.addRow(new Object[]{proceso.getIdProceso(), "Running", proceso.getBlocking()});
       }
    }
    
    void fillRunView(){
       DefaultTableModel modelo = (DefaultTableModel) tableInteractiveProcessList.getModel();
       for(Proceso proceso: controlador.getProcesses()){
           modelo.addRow(new Object[]{proceso.getIdProceso(), "Running", false});
       }
    }
    
    void fillDisplayView(){
        DefaultTableModel processTable = (DefaultTableModel) tblProcessDisplay.getModel();
        processTable.getDataVector().removeAllElements();        
        for(Proceso proceso: controlador.getProcesses()){
            processTable.addRow(new Object[]{proceso.getIdProceso(), "Running", false});
        } 
        DefaultTableModel mailBoxtable = (DefaultTableModel) tblMailBoxDisplay.getModel();       
        mailBoxtable.getDataVector().removeAllElements();        
        for(MailBox mailbox: controlador.getMailBoxes()){
            mailBoxtable.addRow(new Object[]{mailbox.getIdMailBox(), mailbox.cantidadMensajesMaxima-mailbox.bufferMensajes.size(), false});                      
        } 
    }
    
    void showMessageInformation(Mensaje message){
        txaShowMessageContent.setText(message.getPath());
        lblShowMessageDestinationID.setText(message.getDestinationID());
        lblShowMessageSourceID.setText(message.getSourceID());
        lblShowMessageID.setText(String.valueOf(message.getIdMensaje()));
    }
    
    void clearMessageInformation(){
        txaShowMessageContent.setText("");
        lblShowMessageDestinationID.setText("");
        lblShowMessageSourceID.setText("");
        lblShowMessagePriority.setText("");
        lblShowMessageID.setText("");
        lblShowMessageSize.setText("");
    }

    private void tblProcessDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProcessIDMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblProcessDisplay.getSelectedRow();
        String value = (String) tblProcessDisplay.getValueAt(selectedRow, 0); 
        DefaultTableModel actionsTable = (DefaultTableModel) tblActionsDisplay.getModel();        
        actionsTable.getDataVector().removeAllElements();
        Proceso p = controlador.getProcess(value);
        for(MessageRecord record: p.recordHistory){
            actionsTable.addRow(new Object[]{record.getAction(),record.getMessage().getIdMensaje(),record.getTimeStamp()});
        }
        clearMessageInformation();
    }//GEN-LAST:event_tblProcessIDMouseClicked

    private void tblActionsDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblActionsDisplayMouseClicked
        // TODO add your handling code here:
        Proceso process = controlador.getProcess(tblProcessDisplay.getValueAt(tblProcessDisplay.getSelectedRow(), 0).toString());
        Mensaje message = process.getRecordHistory().get(tblActionsDisplay.getSelectedRow()).getMessage();
        showMessageInformation(message);
    }//GEN-LAST:event_tblActionsDisplayMouseClicked

    private void tblMailBoxDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMailBoxDisplayMouseClicked
        // TODO add your handling code here:
        MailBox mailbox = controlador.getMailBoxes().get(tblMailBoxDisplay.getSelectedRow());
        Mensaje message = mailbox.getBufferMensajes().get(tblMailBoxDisplay.getSelectedRow());
        showMessageInformation(message);
    }//GEN-LAST:event_tblMailBoxDisplayMouseClicked

    private void tblMessageDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMailBoxMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblMailBoxDisplay.getSelectedRow();
        String value = (String) tblMailBoxDisplay.getValueAt(selectedRow, 0); 
        DefaultTableModel suscribedTable = (DefaultTableModel) tblProcessDisplay.getModel();
        DefaultTableModel messageTable = (DefaultTableModel) tblMailBoxDisplay.getModel();        
        suscribedTable.getDataVector().removeAllElements();
        messageTable.getDataVector().removeAllElements();        
        for(MailBox mailbox: controlador.getMailBoxes()){
            if(mailbox.getIdMailBox().equals(value)){
                for(Proceso proceso: mailbox.suscritos){
                    suscribedTable.addRow(new Object[]{proceso.idProceso});
                }
                for(Mensaje mensaje: mailbox.getBufferMensajes()){
                    messageTable.addRow(new Object[]{mensaje.idMensaje, "corregir"});
                }
            }
        }
        clearMessageInformation();
    }//GEN-LAST:event_tblMailBoxMouseClicked

    //private void tblProcessDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProcessDisplayMouseClicked
        // TODO add your handling code here:
        //clearMessageInformation();
    //}//GEN-LAST:event_tblProcessDisplayMouseClicked

    private void btnMailBoxDisciplineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMailBoxDisciplineActionPerformed
        JOptionPane.showMessageDialog(null, "FIFO: The first messages to be sent will be the first messages to be received." + "\n" + "\n" + "Priority: Messages with a higher priority value will be received faster.", "MailBox Discipline", 1);
    }//GEN-LAST:event_btnMailBoxDisciplineActionPerformed

    private void btnFormalLenghrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFormalLenghrActionPerformed
        JOptionPane.showMessageDialog(null, "Variable: messages of any size are sent." + "\n" + "\n" + "Fixed: Only messages that have a size less than or equal to the one established by the user will be sent. Those who exceed the limit will not be sent.", "Format-Lenght", 1);
    }//GEN-LAST:event_btnFormalLenghrActionPerformed

    private void btnFormatContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFormatContentActionPerformed
        JOptionPane.showMessageDialog(null, "Text: You can only send text messages written in the space for that purpose." + "\n" + "\n" + "Audio: You can only send audio messages selected from a computer directory. Allowed extensions: mp3, MP3, wma, WMA, midi, MIDI, opus, OPUS, aiff, AIFF." + "\n" + "\n" + "Image: You can only send image messages selected from a computer directory. Allowed extensions: jpg, jpg, jpeg, jpeg, png, png, bmp, bmp, gif, gif." + "\n" + "\n" + "Video: You can only send video messages selected from a computer directory. Allowed extensions: MP4, MP4, WMV, WMV, AMV, AMV, MPG, MPG, MPEG, MPEG, AVI, AVI.", "Format-Content", 1);
    }//GEN-LAST:event_btnFormatContentActionPerformed

    private void btnAdresIndirectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdresIndirectActionPerformed
        JOptionPane.showMessageDialog(null, "They use the MailBox." + "\n" + "\n" + "Static: a MailBox can receive messages from various processes, but can only deliver them to one receiving process." + "\n" + "\n" + "Dynamic: a MailBox can receive messages from several processes and can deliver them to several receiving processes.", "Addressing-Indirect", 1);
    }//GEN-LAST:event_btnAdresIndirectActionPerformed

    private void btnAdressDiectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdressDiectActionPerformed
        JOptionPane.showMessageDialog(null, "Explicit: the sending process knows exactly to which process the message is sent. The receiving process knows exactly from which process receives the message. Before the sent is done." + "\n" + "\n" + "Implicit: the sending process sends a message, but does not know who will receive it. The receiving process knows that it will receive a message, but does not know where it comes from." + "\n" + "Once the message is received, each of the processes knows who the sender was and who was the receiver.", "Addressing-Direct", 1);
    }//GEN-LAST:event_btnAdressDiectActionPerformed

    private void btnSyncroSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSyncroSendActionPerformed
        JOptionPane.showMessageDialog(null, "Blocking: the sending process is blocked until the receiving process sends the confirmation that the message was received." + "\n" + "\n" + "Non-Blocking: the sending process is never blocked even if the process that receives has not sent any acknowledgment of receipt.", "Synchronization-Send", 1);
    }//GEN-LAST:event_btnSyncroSendActionPerformed

    private void btnSyncroReceiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSyncroReceiveActionPerformed
        JOptionPane.showMessageDialog(null, "Blocking: If the receiving process asks for a message and it has not arrived, then the process is blocked waiting until it arrives." + "\n" + "\n" + "Non-Blocking: the receiving process is never blocked, even when the message it waits for has not arrived." + "\n" + "\n" + "Test for Arrival: Coming Soon.", "Synchronization-Receive", 1);
    }//GEN-LAST:event_btnSyncroReceiveActionPerformed

    private void ParamToBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParamToBatchActionPerformed
    
    }//GEN-LAST:event_ParamToBatchActionPerformed

    private void RunRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunRestartActionPerformed
        configTabs.setSelectedIndex(0);
        configTabs.setEnabledAt(1,false);
        configTabs.setEnabledAt(2,false);
        configTabs.setEnabledAt(3,true);
    }//GEN-LAST:event_RunRestartActionPerformed

    private void ObjectsRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObjectsRestartActionPerformed
        configTabs.setSelectedIndex(0);
        configTabs.setEnabledAt(1,false);
        configTabs.setEnabledAt(2,false);
        configTabs.setEnabledAt(3,true);
    }//GEN-LAST:event_ObjectsRestartActionPerformed

    private void BatchExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BatchExecuteActionPerformed
        Sync_Receive receive;
        Sync_Send send;
        Addressing addressing = null;
        Format_Content content = null;
        Format_Length length;
        int lengthNumber = -1;   //el numero en caso de ser fixed 
        MailBox_Discipline discipline;        
        String linea;
        int lineCounter = 1;
        ArrayList<String> config = new ArrayList<String>();
        
        try {
            while((linea = BUFFERREADER.readLine()) != null){
                //Las primeras 6 lineas del txt son de configuracion
                if(lineCounter <= 6){
                    config.add(linea);
                    lineCounter++;
                }
                else
                    break;
            }
        } catch (IOException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
        send = (config.get(0).equals("Send:Blocking"))?Sync_Send.BLOCKING:Sync_Send.NON_BLOCKING;
        receive = Sync_Receive.TEST_FOR_ARRIVAL;
        length = Format_Length.VARIABLE;
        discipline = (config.get(5).equals("MailBox:FIFO"))?MailBox_Discipline.FIFO:MailBox_Discipline.PRIORITY; 
         

            addressing = Addressing.DYNAMIC;
        

            content = Format_Content.IMAGE;

        JOptionPane.showMessageDialog(null, "Receive: " + receive.toString() + "\n Send: " + send.toString() + "\n Addressing: " + addressing.toString() + "\n Content: " + content.toString() + "\n Length: " + length.toString() + " : " + lengthNumber + "\n Discipline: " + discipline.toString(), "Resumen de variables", 1);

        controlador.setConfiguration(receive, send, addressing, content, length, discipline);
        
        //Aca ya esta la configuracion cargada e inicia creacion de procesos y envio de mensajes
        config.clear();
        String[] arrOfStr = null;
        try {
            while((linea = BUFFERREADER.readLine()) != null){
                //Las primeras 6 lineas del txt son de configuracio
                if(lineCounter > 6){
                    if(linea.contains("CreateProcess")){
                        arrOfStr = linea.split(":",3);
                        BatchAddProcessActionPerformed(arrOfStr[1],arrOfStr[2]);
                        System.out.println("Process created: " + arrOfStr[1]);
                    }
                    if(linea.contains("CreateMailBox")){
                        arrOfStr = linea.split(":",3);
                        BatchAddMailBoxActionPerformed(arrOfStr[1],Integer.parseInt(arrOfStr[2]));
                        System.out.println("MailBox created: " + arrOfStr[1] + " : " + arrOfStr[2]);
                    }
                    if(linea.contains("Send")){
                        arrOfStr = linea.split(":",5);
                        BatchSendMessageActionPerformed(arrOfStr[1],arrOfStr[2],arrOfStr[3],Integer.parseInt(arrOfStr[4]),lengthNumber);
                        System.out.println("Message send: " + arrOfStr[1] + " a " + arrOfStr[2] + " Msj: " + arrOfStr[3] + "Prioridad: " + arrOfStr[4]);
                    }
                    if(linea.contains("Receive")){
                        arrOfStr = linea.split(":",3);
                        BatchReceiveMessageActionPerformed(arrOfStr[1],arrOfStr[2]);
                        System.out.println("Message receive: " + arrOfStr[1] + " a " + arrOfStr[2]);
                    }
                    lineCounter++;
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Revisar si es necesario mostrar todo lo de interactivo para cuando es por BATCH.
        if(isOkToStart()){
            checkUploadFileVisibility();
            fillRunView();
        }
    }//GEN-LAST:event_BatchExecuteActionPerformed
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMailBox;
    private javax.swing.JButton btnAddProcess;
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnExecuteBatch;
    private javax.swing.JButton btnGoToRun;
    private javax.swing.JButton btnReceiveMessage;
    private javax.swing.JButton btnReceiveMessage1;
    private javax.swing.JButton btnRunChooseFile;
    private javax.swing.JButton btnSendMessage;
    private javax.swing.JButton btnSystemReset;
    private javax.swing.ButtonGroup btngrpAddressing;
    private javax.swing.ButtonGroup btngrpFormatLength;
    private javax.swing.ButtonGroup btngrpInteractiveSend;
    private javax.swing.ButtonGroup btngrpMailBoxDiscipline;
    private javax.swing.ButtonGroup btngrpSincronizacionReceive;
    private javax.swing.ButtonGroup btngrpSincronizacionSend;
    private javax.swing.JTabbedPane configTabs;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea13;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    private javax.swing.JLabel lblShowMessageDestinationID;
    private javax.swing.JLabel lblShowMessageID;
    private javax.swing.JLabel lblShowMessagePriority;
    private javax.swing.JLabel lblShowMessageSize;
    private javax.swing.JLabel lblShowMessageSourceID;
    private javax.swing.JLabel lblSubscribeToMailBox;
    private javax.swing.JLabel lblSubscribeToMailBox1;
    private javax.swing.JLabel lblSubscribeToMailBox2;
    private javax.swing.JPanel panelAddMailBox;
    private javax.swing.JPanel panelAddProcess;
    private javax.swing.JSpinner spinBatchLines;
    private javax.swing.JSpinner spinMaxNoMessages;
    private javax.swing.JSpinner spinMaxNoMessages1;
    private javax.swing.JSpinner spinMaxNoMessages2;
    private javax.swing.JSpinner spinMaxNoMessages3;
    private javax.swing.JPanel startTab3;
    private javax.swing.JTable tableInteractiveProcessList;
    private javax.swing.JTable tableMailBox;
    private javax.swing.JTable tableProcess;
    private javax.swing.JTable tblActionsDisplay;
    private javax.swing.JTable tblMailBoxDisplay;
    private javax.swing.JTable tblMessageDisplay;
    private javax.swing.JTable tblProcessDisplay;
    private javax.swing.JTextArea txaShowMessageContent;
    private javax.swing.JTextField txfMailBoxID;
    private javax.swing.JTextField txfProcessID;
    private javax.swing.JPanel variableTabPanel1;
    // End of variables declaration//GEN-END:variables
}
